/**
 * A build.gradle script made for and adapted for use with Starsector and creating content for it, specially when using
 * Java or Kotlin with it. It currently has a build task to zip up new updates as releases. Another to update update
 * version value defined here to the mod_info.json and the mod's .version file, if any.
 *
 * For using Kotlin with Starsector, you'll need to include a bundled runtime jar to run Kotlin and one specifically
 * compiled for 1.7 JDK JVM. LazyLib comes bundled with one. It is version 1.3.61 as of writing this.
 *
 * @project anubis_sector
 * @date 2020/07/12
 * @author Martin Lyr√•
 */

// Necessary to update JSON files and change their version values
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

plugins {
    id 'idea'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

// Use Java SE 7 as compile target, ideal for any SDKs newer than 7 (8+ and so on)
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// This reflects into both mod_info.json and anubis_sector.version
project.version = '0.1.DEV-2'

sourceSets {
    main {
        kotlin {
            srcDir './jars/src'
        }
        java {
            srcDir './jars/src'
        }
    }
    test {
        java {
            srcDir './tests/src'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // For using Kotlin (converted to JVM bytecode)
    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib-jdk7
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: '1.3.61'

    // Starsector core libraries + API
    implementation files(
            './../../starsector-core/starfarer.api.jar',    // api
            './../../starsector-core/starfarer.api.zip',    // source files for API
            './../../starsector-core/json.jar',
            './../../starsector-core/lwjgl.jar',
            './../../starsector-core/lwjgl_util.jar'
    )
    //implementation fileTree(dir: './../../starsector-core', include: '*.jar')

    // Nexerelin
    implementation files(
            './../Nexerelin/jars/ExerelinCore.jar',         // jar
            './../Nexerelin/jars/src.zip'                   // source
    )

    // LazyLib
    runtime files(
            './../LazyLib/jars/lib/Kotlin-Runtime.jar'      // LazyLib's bundled Kotlin Runtime
    )
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.6"
        //jdkHome = System.getenv("JDK_7")
    }
}

//
// Build tasks
//
task BuildJar (type: Jar) {
    archiveFileName = "${project.name}.jar" // this is stupid, I should not have to do this, but Gradle insists
    with jar
}


task CopyJar (type: Copy) {
    from BuildJar
    into './jars'
}

task UpdateVersionJsons {
    def slurper = new JsonSlurper()

    // Update mod_info.json
    def modInfoFile = new File("./mod_info.json")
    def json1 = slurper.parse(modInfoFile)
    json1.version = project.version
    modInfoFile.write(new JsonBuilder(json1).toPrettyString())

    // Update the .version file
    def versionFile = new File("./${project.name}.version")
    def json2 = slurper.parse(versionFile)
    def parts = project.version.tokenize('.')
    json2.modVersion.major = parts[0] as Integer
    json2.modVersion.minor = parts[1] as Integer
    json2.modVersion.patch = parts[2] as String
    versionFile.write(new JsonBuilder(json2).toPrettyString())
}

//  Build a .jar then put it in 'jars' folder, ideal for code testing without release
task BuildMod (dependsOn: [UpdateVersionJsons, BuildJar, CopyJar]) {}

//  Prepare a .zip file with the name format "{name}-{version}.zip" for distribution
task MakeModRelease (dependsOn: BuildMod, type: Zip) {
    from './'
    // Add more folders or files here that you wish to include in the release .zips
    include 'data/',
            'graphics/',
            'jars/',
            project.name + '.version',
            'LICENSE',
            'mod_info.json',
            'README.md'
    // Files to not include in the .zips
    exclude 'tests/'
    into project.name
}